// ----------------------------------------------------------------------------// [Simme]//       Java Source File: SendableUI.java//                  $Date: 2004/08/25 15:36:00 $//              $Revision: 1.7 $// ----------------------------------------------------------------------------package at.einspiel.messaging;import at.einspiel.logging.Logger;import at.einspiel.simme.nanoxml.XMLElement;import at.einspiel.simme.nanoxml.XMLParseException;/** * This class represents an easily createable and sendable user interface. It * provides two possibilities for creation: * <ul> * <li>The <code>SendableUI</code> may be initialized with an xml string, by * calling the method {@linkplain #initialize(String)}. See its doc for further * information. Alternatively this string may be passed as a parameter to the * constructor.</li> * <li>The second possibility is provided by means of * {@linkplain #SendableUI(String, String)}which creates a simple instance with * only title and text message.</li> * </ul> * <p> * The xml string to create a new instance of SendableUI is directly accessible * through {@linkplain #getXmlString()}. * </p> *  * @author kariem */public class SendableUI {	private byte id;	private boolean list;	private boolean xmlInfo;	private ISimpleInfo infoObject;	/**	 * Creates a new <code>SendableUI</code> from a string.	 * 	 * @param xmlString	 *            a string that contains information for the building a	 *            displayable component.	 * @see #initialize(String)	 */	public SendableUI(String xmlString) {		initialize(xmlString);	}	/**	 * Creates a new instance of <code>SendableUI</code>.	 * 	 * @param title	 *            the title.	 * @param message	 *            the message.	 */	public SendableUI(String title, String message) {		infoObject = new InfoText(title, message);	}	/**	 * Initializes the SendableUI with the given xml string.	 * 	 * @param xmlString	 *            should be in the format.	 * 	 * <pre>	 *      &lt;element title=&quot;title&quot; id=&quot;ID&quot; list=&quot;true&quot;&gt;	 *          &lt;child&gt;content 1&lt;/child&gt;	 *          &lt;child&gt;content 2&lt;/child&gt;	 *          &lt;child&gt;content 3&lt;/child&gt;	 *      &lt;/element&gt;	 * </pre>	 * 	 * or	 * 	 * <pre>	 *      &lt;element title=&quot;title&quot;	 *               id=&quot;ID&quot;	 *               list=&quot;false&quot;	 *               msg=&quot;Text&quot;/&gt;	 * </pre>	 */	public void initialize(String xmlString) {		XMLElement xml = new XMLElement();		try {			xml.parseString(xmlString);			makeXmlDisplayable(xml);		} catch (XMLParseException xex) {			infoObject = new InfoText(xmlString, xex);		}	}	/**	 * Sets the id. This field is optional.	 * 	 * @param id	 *            the id.	 *  	 */	public void setId(byte id) {		this.id = id;	}	/**	 * Returns the id.	 * 	 * @return the id.	 *  	 */	public byte getId() {		return id;	}	/**	 * Returns the information object.	 * 	 * @return the info object.	 *  	 */	public ISimpleInfo getInfoObject() {		return infoObject;	}	/**	 * Whether this instance builds a list.	 * 	 * @return <code>true</code> if this instance may be rendered into a list,	 *         <code>false</code> otherwise.	 */	public boolean isList() {		return list;	}	/**	 * Returns whether this instance contains additional information as xml.	 * 	 * @return <code>true</code>, if this instance contains xml information,	 *         <code>false</code> otherwise.	 */	public boolean hasXmlInfo() {		return xmlInfo;	}	/**	 * Creates a displayable from an xml element. The element must contain the	 * attributes <code>title</code> and <code>id</code>. The boolean	 * attribute <code>list</code> is optional. If set to <code>true</code>	 * the created displayable will show a list with several entries.	 * 	 * @param xml	 *            the element.	 */	private void makeXmlDisplayable(XMLElement xml) {		Logger.debug("xml-ing");		final String name = xml.getName();		// show either list, or simple status message		if (xml.getAttributeBoolean("list")) {			infoObject = new InfoList(xml);		} else if (name.equals("text")) {			infoObject = new InfoText(xml);		} else { // special information, save first child			infoObject = new InfoXml(xml);		}	}	/**	 * Returns an XML representation of this object as a string. This string can	 * be used to create a new sendable UI, by using {@link #SendableUI(String)}.	 * This method may be used to send user interface information across a	 * network. The object is serialized to XML.	 * 	 * @return a string that contains the information to render the user	 *         interface component.	 */	public String getXmlString() {		return infoObject.getXmlString();	}}